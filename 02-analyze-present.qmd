---
title: "Climate change is affecting temperatures in locations around the country"
format: html
editor: visual
---

In many locations around the U.S. (and the world!), climate change is causing **increased temperatures**. You will be able to see these trends in data from Los Angeles data.

This workflow has been split into 2 parts:

1.  Wrangling the data (A Python Jupyter Notebook)
2.  Computing a linear trend line and present the results with a plot (This Quarto R notebook!)

You should be in a group of 4-6 other hackathon participants, and a subgroup of 2-3. If you're reading this notebook in your group, you're working on part 2. With your subgroup, you will complete the following **five steps**:

1.  **Plan** your analysis a full group of 4-6.
2.  **Set up** your analysis by importing any necessary libraries
3.  **Import data** wrangled by the other subgroup, or synthetic data if those are not available.
4.  **Calculate** a linear trendline
5.  **Plot and present** your results

*First...you have to discuss the format of your intermediate data products with your group!*

------------------------------------------------------------------------

## STEP 1: TALK TO THE SUBGROUP THAT WILL USE YOUR DATA!

Your task as the analysis subgroup is to compute a linear trend line for annual temperature data prepared by the wrangling subgroup. You will need to work together to come up with an intermediate data specification. What file format do you want the data in? If you want a CSV file, as we suggest, what columns do you need? What will the column names be? What will the data in each column look like?

You can always re-negotiate, but it's important to stay in communication with other subgroups. Write a description of the intermediate data product you will use:

WRITE YOUR INTERMEDIATE DATA DESCRIPTION HERE

## STEP 2: SET UP

### R is more powerful with **packages**

Because R is **open source**, lots of different people and organizations can contribute (including you!). Many contributions are in the form of external ðŸ“– [**packages**, also known as libraries](https://www.earthdatascience.org/courses/earth-analytics/document-your-science/install-r-packages/). Since they do not come with a standard R download, ðŸ“– packages need to be installed and **imported**. For the Hackathon, you should have everything you need installed on Cyverse.

### There are excellent `R` libraries for tabular data and plotting

For this workflow, you will need the `ggplot2` package, which helps create beautiful plots. We also recommend the `tidyverse` package for working with both [**tabular data** such as comma-separated value or csv files](https://www.earthdatascience.org/courses/intro-to-earth-data-science/file-formats/use-text-files/) and data frames and the `tidymodels` package for fitting a linear model (although it is possible to do all of that in base R with no external packages).

> You can think of both tabular data and data frames as being like a **spreadsheet or database**.

### YOUR TASK:

Here is some code to import the tidyverse and ggplot2 packages, but **watch out! - there's a couple mistakes**:

``` r
library(ggplot)
library(tidymodels)
libray(tidyverse)
```

Using the code above as a starting point, complete the following **two** steps:

1.  Paste the code from above into the **code cell** below:
2.  **Correct the typos** to properly import the pandas library under its **alias** pd as well as the hvplot pandas extension.

```{r}
# YOUR CODE HERE
```

## STEP 3: LOAD DATA

You will be using the intermediate data generated by the other half of your team. Until then, you should work with synthetic data **in the same format**.

The following code imports the intermediate data, or if it doesn't exist yet generates synthetic data. The synthetic data consists of Gaussian noise added to a linear increase in temperature over time, but could be entirely random. Notice that we are using the `file.path()` function to create a **reproducible, cross-platform** file path:

``` r
path <- file.path('data', 'data.csv')

if (file.exists(path)) {
  # Read in the prepared intermediate data if it exists
  df <- read_csv(path)
} else {
  intercept = 60
  slope <- 0.1
  df <- data.frame(
    year=c(1945:2022)
  ) 
  df <- df %>%
    mutate(temperature_f=intercept + row_number()*slope + rnorm(sd=5, n=n()))
}

# Check that data loaded correctly
head(df)
```

### YOUR TASK:

1.  Copy the sample code into the code cell below.
2.  Modify it so that the filepath points to the actual location your group plans to keep the intermediate data.
3.  Modify the column names and formats of the synthetic data so that it matches the format your group agreed on.
4.  Clean up the code by using **expressive variable names**, **expessive column names**, and adding **descriptive comments**

```{r}
# YOUR CODE HERE
```

## STEP 4: FIT A LINEAR MODEL

Temperatures are increasing worldwide, but to test if they are in Los Angeles we can apply a **linear model** using the following code as a starting point. Notice that we're calculating a "year after 1945" column rather than fitting the model to the year. This makes the intercept value more meaningful; it now gives us an estimate of the average temperature in 1945:

``` r
df <- df %>%
  mutate(year_after_1945=row_number()-1)
lm <- linear_reg() %>%
  fit(temperature_f~year_after_1945, data=df)
lm
```

### YOUR TASK:

1.  Paste the sample code into the cell below
2.  Change the variable names to match your **expressive** variable names from above

```{r}
# YOUR CODE HERE
```

What does your model suggest about mean annual temperatures in Los Angeles? Are there any assumptions to using a linear model that the reader should be aware of?

WRITE ABOUT YOUR MODEL RESULTS HERE

## STEP 5: PLOT

The following code will make a plot of your data:

``` r
df %>%
  bind_cols(predict(lm, df)) %>%
  ggplot(aes(x=year)) +
  geom_line(aes(y=temperature_f, color='Measured')) +
  geom_line(aes(y=.pred, color='Linear Model'))
```

YOUR TASK:

1.  Copy the sample code into the cell below
2.  Change the variable and column names to match *your* names
3.  Customize the plot with a title, axis labels, and (optional) a different theme and colors

```{r}
# YOUR CODE HERE
```

WRITE YOUR INTERPRETATION OF YOUR PLOT HERE
